export declare module Point {
    type Point2 = {
        x: number;
        y: number;
    };
    const equal: ({ x: p1x, y: p1y }: Point2, { x: p2x, y: p2y }: Point2) => boolean;
    function lerp({ x: x1, y: y1 }: Point2, { x: x2, y: y2 }: Point2, t: number): Point2;
    function opposite({ x, y }: Point2): Point2;
    function perp({ x, y }: Point2): Point2;
    function dotProduct({ x: p1x, y: p1y }: Point2, { x: p2x, y: p2y }: Point2): number;
    function angleTo({ x: p1x, y: p1y }: Point2, { x: p2x, y: p2y }: Point2): number;
    function angleFrom({ x: p1x, y: p1y }: Point2, { x: p2x, y: p2y }: Point2): number;
    function rotate({ x: originX, y: originY }: Point2, { x: rotateAnchorX, y: rotateAnchorY }: Point2, angle: number): Point2;
    function clamp({ x: x, y: y }: Point2, { x: xMin, y: yMin }: Point2, { x: xMax, y: yMax }: Point2): Point2;
    function boundaryLoop({ x: x, y: y }: Point2, { x: xMin, y: yMin }: Point2, { x: xMax, y: yMax }: Point2): Point2;
    function sum(points: Point2[]): Point2;
    function operation<T>(a: Point2, b: number | Point2, method: (a: number, b: number) => number): Point2;
    function average(points: Point2[]): Point2;
    function translateByVector(point: Point2, angle: number, length: number): Point2;
    function coordinateRatioToScreen(x: number, y: number, width: number, height: number): Point2;
}
