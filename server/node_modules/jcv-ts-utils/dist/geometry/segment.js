"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Segment = void 0;
const point_1 = require("./point");
const distance_1 = require("./distance");
var Segment;
(function (Segment) {
    var angleTo = point_1.Point.angleTo;
    var angleFrom = point_1.Point.angleFrom;
    function wedge({ p1: { x: p1x, y: p1y }, p2: { x: p2x, y: p2y }, }) {
        return p1x * p2y - p1y * p2x;
    }
    Segment.wedge = wedge;
    function normalized(segment) {
        const len = length(segment);
        if (len === 0) {
            return { x: 0, y: 0 };
        }
        const { x, y } = toPoint(segment);
        return { x: x / len, y: y / len };
    }
    Segment.normalized = normalized;
    function toPoint({ p1: { x: p1x, y: p1y }, p2: { x: p2x, y: p2y }, }) {
        return { x: p2x - p1x, y: p2y - p1y };
    }
    Segment.toPoint = toPoint;
    function SegmentAddLength(segment, backward) {
        const angle = backward ? backwardAngle(segment) : forwardAngle(segment);
        const len = length(segment);
        const dx = Math.cos(angle) * len;
        const dy = Math.sin(angle) * len;
        const { p1: p1, p2: p2 } = segment;
        const { x: p1x, y: p1y } = p1;
        const { x: p2x, y: p2y } = p2;
        return {
            p1: backward ? p1 : { x: p1x + dx, y: p1y + dy },
            p2: backward ? { x: p2x + dx, y: p2y + dy } : p2,
        };
    }
    Segment.SegmentAddLength = SegmentAddLength;
    function center({ p1: { x: p1x, y: p1y }, p2: { x: p2x, y: p2y }, }) {
        return { x: (p1x + p2x) / 2, y: (p1y + p2y) / 2 };
    }
    Segment.center = center;
    function length({ p1, p2 }) {
        return distance_1.Distance.pointToPoint(p1, p2);
    }
    Segment.length = length;
    function forwardAngle({ p1, p2 }) {
        return angleTo(p1, p2);
    }
    Segment.forwardAngle = forwardAngle;
    function backwardAngle({ p1, p2 }) {
        return angleFrom(p1, p2);
    }
    Segment.backwardAngle = backwardAngle;
    function interpolation({ p1: { x: p1x, y: p1y }, p2: { x: p2x, y: p2y } }, t) {
        return { x: t * p2x + (1 - t) * p1x, y: t * p2y + (1 - t) * p1y };
    }
    Segment.interpolation = interpolation;
})(Segment = exports.Segment || (exports.Segment = {}));
//# sourceMappingURL=segment.js.map