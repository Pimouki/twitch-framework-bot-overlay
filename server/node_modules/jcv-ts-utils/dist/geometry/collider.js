"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Collider = void 0;
class Collider {
    algorithmType;
    items;
    constructor(algorithmType, items = []) {
        this.algorithmType = algorithmType;
        this.items = items;
    }
    getCollisions() {
        let collides = [];
        switch (this.algorithmType) {
            case "sorted":
                const copy = this.items.sort(({ x: ax, y: ay }, { x: bx, y: by }) => {
                    return ax !== bx ? ax - bx : ay - by;
                });
                for (let i = 0; i < copy.length; i++) {
                    const current = copy[i];
                    const next = copy[i + 1];
                    if (!next) {
                        break;
                    }
                    if (current.isCollide(next)) {
                        collides = [...collides, { a: current, b: next }];
                    }
                }
                break;
            default:
            case "all":
                for (let i = 0; i < this.items.length; i++) {
                    const item1 = this.items[i];
                    for (let j = i + 1; j < this.items.length; j++) {
                        const item2 = this.items[j];
                        if (item1.isCollide(item2)) {
                            collides = [...collides, { a: item1, b: item2 }];
                        }
                    }
                }
        }
        return collides;
    }
}
exports.Collider = Collider;
//# sourceMappingURL=collider.js.map