"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayUtils = void 0;
var ArrayUtils;
(function (ArrayUtils) {
    function pickRandomOne(array) {
        if (!array.length) {
            throw new Error("array is empty on pickRandom");
        }
        return array[Math.floor(Math.random() * array.length)];
    }
    ArrayUtils.pickRandomOne = pickRandomOne;
    function shuffle(array) {
        const copy = Array.from(array);
        for (let i = copy.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [copy[i], copy[j]] = [copy[j], copy[i]];
        }
        return copy;
    }
    ArrayUtils.shuffle = shuffle;
    function removeItem(current, index) {
        return current.filter((_, i) => i !== index);
    }
    ArrayUtils.removeItem = removeItem;
    function operation(a, b, method) {
        if (!Array.isArray(b)) {
            return a.map((item) => method(item, b));
        }
        if (a.length >= b.length) {
            return a.map((item, index) => b.length <= index ? item : method(item, b[index]));
        }
        return b.map((item, index) => a.length <= index ? item : method(a[index], item));
    }
    ArrayUtils.operation = operation;
    function fillWithIndex(size, start = 0) {
        return new Array(size).fill(start).map((v, i) => v + i);
    }
    ArrayUtils.fillWithIndex = fillWithIndex;
    function updateById(current, index, value) {
        return current.map((item, i) => (i === index ? value : item));
    }
    ArrayUtils.updateById = updateById;
    function removeDuplicated(current) {
        return current.filter((v, i, self) => self.indexOf(v) === i);
    }
    ArrayUtils.removeDuplicated = removeDuplicated;
    function translateItems(arr, from, to) {
        if (to < 0) {
            return arr;
        }
        const copy = arr.slice();
        copy.splice(to, 0, copy.splice(from, 1)[0]);
        return copy;
    }
    ArrayUtils.translateItems = translateItems;
    function range(start, end) {
        const length = Math.abs(end - start) + 1;
        const step = end >= start ? 1 : -1;
        return Array.from({ length }, (_, i) => start + i * step);
    }
    ArrayUtils.range = range;
})(ArrayUtils = exports.ArrayUtils || (exports.ArrayUtils = {}));
//# sourceMappingURL=array-utils.js.map