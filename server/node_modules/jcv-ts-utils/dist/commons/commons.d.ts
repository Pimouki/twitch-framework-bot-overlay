export declare function notImplementFn(): void;
export declare function notInitializedFn(): void;
export declare function notInitializedPromise(): Promise<void>;
/**
 * Instancie un debounce qui permet de se faire rappeler à la fin du timeout
 * si un autre call s'est exécuté alors le timeout est réinitialisé
 * et la fonction précédente sera annulée
 * @param handler
 * @param time
 */
export declare const createDebounce: <T extends (...args: any) => void>(handler: T, time: number) => {
    call: (...args: Parameters<T>) => void;
    abort: () => void;
};
export declare function loadImage(url: string): Promise<HTMLImageElement>;
export type Labeled<T> = {
    label: string;
    value: T;
};
