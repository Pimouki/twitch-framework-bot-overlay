export type EasingCallback = (onValue: (value: number) => void, onFinish: () => void) => void;
export type EasingFunction = (n: number) => number;
export type EasingOption = {
    easing: EasingFunction;
    start: number;
    scale: number;
    time: number;
};
export declare const createEasing: ({ easing, time, start, scale, }: EasingOption) => EasingCallback;
declare function bounceOut(x: number): number;
export declare const Easing: {
    easeShake(amount: number, inverse?: boolean): EasingFunction;
    /**
     * Amount of wave
     * Inverse wave starting
     * @param amount
     * @param inverse
     */
    easeShakeIn(amount: number, inverse?: boolean): EasingFunction;
    /**
     * Amount of wave
     * @param amount
     * Inverse wave starting
     * @param inverse
     */
    easeShakeOut(amount: number, inverse?: boolean): EasingFunction;
    linear: (t: number) => number;
    easeInQuad: (t: number) => number;
    easeOutQuad: (t: number) => number;
    easeInOutQuad: (t: number) => number;
    easeInCubic: (t: number) => number;
    easeOutCubic: (t: number) => number;
    easeInOutCubic: (t: number) => number;
    easeInQuart: (t: number) => number;
    easeOutQuart: (t: number) => number;
    easeInOutQuart: (t: number) => number;
    easeInQuint: (t: number) => number;
    easeOutQuint: (t: number) => number;
    easeInOutQuint: (t: number) => number;
    easeInElastic: (x: number) => number;
    easeOutElastic: (x: number) => number;
    easeInOutElastic: (x: number) => number;
    easeInBounce: (x: number) => number;
    easeOutBounce: typeof bounceOut;
    easeInOutBounce: (x: number) => number;
};
export {};
