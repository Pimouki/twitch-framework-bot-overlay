import { __decorate } from "tslib";
import { rtfm } from '@twurple/common';
import { EventSubChannelFollowEvent } from "../events/EventSubChannelFollowEvent.mjs";
import { EventSubSubscription } from "./EventSubSubscription.mjs";
/**
 * @private
 */
let EventSubChannelFollowSubscription = class EventSubChannelFollowSubscription extends EventSubSubscription {
    constructor(handler, client, _userId, _moderatorId) {
        super(handler, client);
        this._userId = _userId;
        this._moderatorId = _moderatorId;
        /** @protected */ this._cliName = 'follow';
    }
    get id() {
        if (this._moderatorId) {
            return `channel.follow.${this._userId}.${this._moderatorId}`;
        }
        return `channel.follow.${this._userId}`;
    }
    get authUserId() {
        var _a;
        return (_a = this._moderatorId) !== null && _a !== void 0 ? _a : this._userId;
    }
    transformData(data) {
        return new EventSubChannelFollowEvent(data, this._client._apiClient);
    }
    async _subscribe() {
        const transport = await this._getTransportOptions();
        if (this._moderatorId) {
            return await this._client._apiClient.eventSub.subscribeToChannelFollowEventsV2(this._userId, this._moderatorId, transport);
        }
        return await this._client._apiClient.eventSub.subscribeToChannelFollowEvents(this._userId, transport);
    }
};
EventSubChannelFollowSubscription = __decorate([
    rtfm('eventsub-base', 'EventSubSubscription')
], EventSubChannelFollowSubscription);
export { EventSubChannelFollowSubscription };
